class Solution {
public:
    string longestPalindrome(string s) {
        if(s.length()<=1)
            return s;
        int m=s.length(),max=INT_MIN,maxi[2];
        int dp[m][m];
        string ans;
        memset(dp, 0, sizeof(dp)); 
        for(int i=0;i<m;i++)
        {
            for(int j=i;j<m;j++)
            {
                if(i==j)
                    dp[i][j]=1;
                if(j==i+1)
                {
                    if(s[i]==s[j])
                    {
                        dp[i][j]=1;
                    }
                }
            } 
        }
        for(int k=3;k<=m;k++)
        {
            for(int i=0;i<m-k+1;i++)
            {
                int j= i+k-1;
                if(s[i]==s[j]&&dp[i+1][j-1]==1)
                {
                    dp[i][j]=1;
                }
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=i;j<m;j++)
            {
                if(dp[i][j]==1)
                {
                    if((j-i)>max)
                    {
                        max=j-i;
                        maxi[0]=i;
                        maxi[1]=j;
                    }
                }
            }
        }
        for(int i=maxi[0];i<=maxi[1];i++)
        {
            ans.push_back(s[i]);
        }
        return ans;
    }
};
